---
layout: post
title:  "技术的整合"
date:   2014-06-04 18:36:00
categories: Thinking
---

#关于编程语言

在应用开发的角度来讲，其实java和c#的编码习惯并不是太大，其概念都是有着一一对应的方法，只不过.net的语法糖会多一些，因此你可以写出你认为更加优雅的代码。我是一个经常要使用这两种语言的人，我个人感觉，最直接的感受就是java命名方法开头小写，而c#是开头大写而已。但是，我这里并不是想肤浅地说，其实java和c#一样，因为其他他们很不一样。

从现在的语言发展来说，其实c#这门语言其实会更加灵活，支持的功能也更加丰富（不讨论支持的库）。c#在4.0版本就支持lambda表达式，还有LinQ,这一点给予了开发者在数据查询方便给了很大地支持，不仅大大简化了代码，而且在效率上也有了提升。而java也只有最近才开始支持lamda,scale我没有研究过，这个还有待后续研究。

**javascript**，在我最开始接触web的时候，就已经知道。那时候为了实现一个网页特效，经常会下载一些别人写好的特效代码，那些特效代码几乎都是javascript写的，而那时候javascript的库不是很多，因此几乎所有特效都是设计者全部自己实现，因此也造成了代码实现所需的代码特别冗长，这让我在初期造成了对javascript并不好的印象。后来真正开始学习javascript是因为对jquery的使用，jquery是一门强大的js库，封装一套实用的库，几十行代码可能就能够实现以往上千行的功能，加上最近前端框架的流行，HTML5的普及，以及类似像node.js这种逆天的web服务编程框架，让人不得不对这门语言佩服！不过，即便佩服，但是一旦真正写javascript的时候，还是需要有一定的痛苦过程，其实弱类型还好，关键是javscript的回调一直感觉并不是一种很好的机制。异步，多线程即便现在已经有了多线程库的支持，但是在代码风格上，还不是很受那些习惯写强类型面向对象语言的人喜欢（不过将他们混为一谈也是不合理的）。

**php**，我接触过一段时间，应该说在我大学学习完c语言之后，然后就是学习php。那时候，用简单的php语法来实现一些原本重复性的工作，这是我编程的一种乐趣。不过php语言后来没有深入学习，十分可惜，后期一直想继续研究一下的，但是又觉得似乎并没有太大的意义（只是又掌握一门web编程语言？）。

**python语言**，是我特别想学习的一门语言，可能今年有空我会找一些书籍好好学习一下，python语言是一个纯脚本语言，也人们常常称之为胶水语言的一种。有一些其他语言的编程平台，其构建有很多都采用python来作为语言的构建工具，在linux中，python在其担当了比较重要的角色。其实，我对python的印象特别好，是因为在我第一部nokia手机中，就有支持python编程的应用，那还是J2ME的年代。

**Object-c语言**，在一开始学习这门语言的时候，我那时候就感觉object-c特别特殊，无论是他的语言还有一些内在的设计思想，都和常见的面向对象语言有着一定的区别。object-c的的任何函数调用，都是通过消息传递，一种真正意义上的消息传递。方括号的写法也给你了一些常见语言看不到的方式。在功能实现来说，object-c还是能够比java需要编写的代码数量少，object-c是一门古老的语言，但是正式这门经典的语言，让你能够构建潮流上的IOS应用，这一点非常有魅力，如果有精力，我应该好好深入学习一下他的底层，毕竟他继续承了所有c的特性。

#关于开发平台

**Android**:在很久很久以前，那时候我第一次听说android是某一天在新闻上播报谷歌公司正在研究智能操作系统，预计2008发布。然后某一天，我碰到谷歌出的第一部android手机：G1,然后我就对他产生不可抗拒的好奇，我大概是在11年开始接触和自学了Android，那时候苹果也早进入中国市场并大卖了，虽然我也很想研究IOS，但是限于没有足够的资金购买苹果设备，于是还是专心研究更加实际的安卓。我学习安卓的一大部分语音也是因为他是基于LINUX的，从大一开始我就一直在看一些关于LINUX的书籍，即便到现在并没有实际在工作中用到linux，但是我仍然会不时地关注他。Android确实是一个快速构建的应用的平台，无论是在android的环境搭建还是提供的SDK，在文档方面和API易用性上，谷歌公司都做得不错，但是由于他是开源的，不可避免造成碎片化的情况，给开发者带来很多不便。但是到现在，我一直将android作为我的一个快速开发实现平台，我的很多想法，一般都会在android先实现，然后再转移到其他平台中去。

**Asp.net**：我的第一个实际的项目是基于ASP.NET的，那时候承诺接收那个项目的时候我还一点c#语法没有接触过，但是好在这个平台入门的门槛比较低，加上自己已经学过JAVA了，因此快速入门是没有问题的。后来陆陆续续几个项目，也几乎都是基于asp.net的，因此我对asp.net确实开发经验会比较多。在学习他的同时，ASP.NET这个平台也给予了我很多的想法，比如对于控件的设计和封装，方法的调用，采用数据源的通用数据绑定方法，接口的设计原则，虽然ASP.NET几乎不涉及多线程编程（大多数情况下，你不会需要去写线程，但是ASP.NET本身是一个多线程运行环境），都让我后续的一些其他平台设计类库中得到了很多养分和灵感，ASP.NET发展的现在，确实有很多值得借鉴学习的地方，随着他的版本地不断更新，技术迁移过渡也不存在太多的问题，即便现在的ASP.NET MVC，我们仍然可以较好地进行转移。国内的ASP.NET MVC虽然应用不多，但是相信这马上又会是一种不可逆的趋势，因为ASP.NET MVC能够更好支持移动平台方面的技术。

**IOS**：我一直计划着能够开发IOS应用，然后刚好也有IOS的开发的项目，因此我又很信心满满地希望自己在一个礼拜内能够入门IOS，IOS平台虽然我的开发经验还不够，但是这个平台有一些特性我很喜欢，就比如IOS的设计原则，丰富美观的控件库，高效率的开发工具。另外，IOS应用一般会比Android稳定，为什么会这样子呢？如果有同时接触过这两个平台的开发人员，其实在开发过程中会感觉IOS应用比Android更容易崩溃，但是一般应用上线发布后，反而ios程序会运行比android稳定，因为ios在语言和平台的特性给予开发人员相对android的java虚拟机更弱一些的容错机制，因此在开发过程中，开发人员会将大部分有可能造成bug的问题修复，相反android可能有一些bug由于开发机环境问题没有修复，到了实际终端上，安卓环境的复杂性导致了其开发程序更容易造成一些不稳定。所以，IOS的开发体验一直是优于Android。